[{"/Users/philippebaillargeon/Documents/AI/chess-app/src/index.tsx":"1","/Users/philippebaillargeon/Documents/AI/chess-app/src/reportWebVitals.ts":"2","/Users/philippebaillargeon/Documents/AI/chess-app/src/App.tsx":"3","/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Chessboard/Chessboard.tsx":"4","/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Chessboard/ChessboardHelper.ts":"5","/Users/philippebaillargeon/Documents/AI/chess-app/src/Constants.ts":"6","/Users/philippebaillargeon/Documents/AI/chess-app/src/Engine/OnDropObservable.ts":"7","/Users/philippebaillargeon/Documents/AI/chess-app/src/Engine/Engine.ts":"8","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/Referee.ts":"9","/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Tile/Tile.tsx":"10","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/index.ts":"11","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/KnightRules.ts":"12","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/RookRules.ts":"13","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/BishopRules.ts":"14","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/PawnRules.ts":"15","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/QueenRules.ts":"16","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/KingRules.ts":"17","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/GeneralRules.ts":"18"},{"size":500,"mtime":1638977559000,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1638977559000,"results":"21","hashOfConfig":"20"},{"size":215,"mtime":1646240381487,"results":"22","hashOfConfig":"20"},{"size":11250,"mtime":1649051501029,"results":"23","hashOfConfig":"20"},{"size":1370,"mtime":1648782736452,"results":"24","hashOfConfig":"20"},{"size":5612,"mtime":1648149440176,"results":"25","hashOfConfig":"20"},{"size":240,"mtime":1648772466815,"results":"26","hashOfConfig":"20"},{"size":7508,"mtime":1649051498100,"results":"27","hashOfConfig":"20"},{"size":10381,"mtime":1649049048209,"results":"28","hashOfConfig":"20"},{"size":547,"mtime":1646240487938,"results":"29","hashOfConfig":"20"},{"size":178,"mtime":1638977559000,"results":"30","hashOfConfig":"20"},{"size":1182,"mtime":1638977559000,"results":"31","hashOfConfig":"20"},{"size":1397,"mtime":1646361973038,"results":"32","hashOfConfig":"20"},{"size":2836,"mtime":1638977559000,"results":"33","hashOfConfig":"20"},{"size":1763,"mtime":1646507542604,"results":"34","hashOfConfig":"20"},{"size":1009,"mtime":1638977559000,"results":"35","hashOfConfig":"20"},{"size":1008,"mtime":1638977559000,"results":"36","hashOfConfig":"20"},{"size":896,"mtime":1638977559000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"qecjsu",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/philippebaillargeon/Documents/AI/chess-app/src/index.tsx",[],["78","79"],"/Users/philippebaillargeon/Documents/AI/chess-app/src/reportWebVitals.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/App.tsx",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Chessboard/Chessboard.tsx",["80","81","82","83","84","85","86","87","88","89"],"/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Chessboard/ChessboardHelper.ts",["90"],"import { Piece, PieceType, Position, samePosition } from \"../../Constants\";\nimport Referee from \"../../referee/Referee\";\n\nexport default class ChessboardHelper {\n  castlingReduce(\n    pieces: Piece[],\n    castling: any,\n    tempKingPosX: number,\n    tempKingPosY: number,\n    grabPosition: Position,\n    x: number,\n    y: number\n  ) {\n    pieces.reduce((results, piece) => {\n      if (castling.side === \"right\") {\n        if (\n          samePosition(piece.position, {\n            x: tempKingPosX + 3,\n            y: tempKingPosY,\n          }) &&\n          piece.type === PieceType.ROOK\n        ) {\n          piece.position.x = 5;\n          piece.hasMoved = true;\n        }\n      } else if (castling.side === \"left\") {\n        if (\n          samePosition(piece.position, {\n            x: tempKingPosX - 4,\n            y: tempKingPosY,\n          }) &&\n          piece.type === PieceType.ROOK\n        ) {\n          piece.position.x = 3;\n          piece.hasMoved = true;\n        }\n      }\n      if (samePosition(piece.position, grabPosition)) {\n        piece.position.x = x;\n        piece.position.y = y;\n        results.push(piece);\n      }\n      if (!samePosition(piece.position, { x, y })) {\n        if (piece.type === PieceType.PAWN) {\n          piece.enPassant = false;\n        }\n        results.push(piece);\n      }\n\n      return results;\n    }, [] as Piece[]);\n  }\n}\n","/Users/philippebaillargeon/Documents/AI/chess-app/src/Constants.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/Engine/OnDropObservable.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/Engine/Engine.ts",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/Referee.ts",["111","112","113","114","115"],"import { off } from \"process\";\nimport {\n  PieceType,\n  TeamType,\n  Piece,\n  Position,\n  samePosition,\n  Move,\n} from \"../Constants\";\n\nimport {\n  pawnMove,\n  knightMove,\n  bishopMove,\n  rookMove,\n  queenMove,\n  kingMove,\n} from \"./rules\";\n\nexport default class Referee {\n  state: Piece[] = [];\n\n  isEnPassantMove(\n    initialPosition: Position,\n    desiredPosition: Position,\n    type: PieceType,\n    team: TeamType,\n    boardState: Piece[]\n  ) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    if (type === PieceType.PAWN) {\n      if (\n        (desiredPosition.x - initialPosition.x === -1 ||\n          desiredPosition.x - initialPosition.x === 1) &&\n        desiredPosition.y - initialPosition.y === pawnDirection\n      ) {\n        const piece = boardState.find(\n          (p) =>\n            p.position.x === desiredPosition.x &&\n            p.position.y === desiredPosition.y - pawnDirection &&\n            p.enPassant\n        );\n        if (piece) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  //TODO\n  //Add check!\n  //Add checkmate!\n  //Add stalemate!\n  isValidMove(\n    initialPosition: Position,\n    desiredPosition: Position,\n    type: PieceType,\n    team: TeamType,\n    boardState: Piece[],\n    turn: boolean,\n    depth: number\n  ) {\n    let validMove = false;\n    let tempBoard: Piece[];\n    let kingPrevPos = {\n      x: 10,\n      y: 10,\n    };\n\n    if (this.checkTurn(team, turn)) {\n      // console.log(\"checkturn\");\n      return false;\n    }\n\n    switch (type) {\n      case PieceType.PAWN:\n        validMove = pawnMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n        break;\n      case PieceType.KNIGHT:\n        validMove = knightMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n        break;\n      case PieceType.BISHOP:\n        validMove = bishopMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n        break;\n      case PieceType.ROOK:\n        validMove = rookMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n        break;\n      case PieceType.QUEEN:\n        validMove = queenMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n        break;\n      case PieceType.KING:\n        validMove = kingMove(\n          initialPosition,\n          desiredPosition,\n          team,\n          boardState\n        );\n\n        if (depth < 1 && validMove) {\n          tempBoard = JSON.parse(JSON.stringify(boardState));\n          tempBoard.map((piece) => {\n            if (samePosition(piece.position, initialPosition)) {\n              piece.position = desiredPosition;\n              kingPrevPos.x = piece.position.x;\n              kingPrevPos.y = piece.position.y;\n              if (\n                this.kingMoveToInvalidSquare(\n                  team,\n                  desiredPosition,\n                  tempBoard,\n                  turn,\n                  depth\n                )\n              ) {\n                validMove = false;\n              }\n            }\n          });\n        }\n        break;\n    }\n\n    if (validMove && depth < 1) {\n      tempBoard = JSON.parse(JSON.stringify(boardState));\n      tempBoard.map((piece) => {\n        if (samePosition(piece.position, initialPosition)) {\n          piece.position = desiredPosition;\n          tempBoard = this.removeCapturedPiece(piece, tempBoard);\n          if (this.isInCheck(tempBoard, turn)) {\n            validMove = false;\n          }\n        }\n      });\n    }\n    return validMove;\n  }\n\n  removeCapturedPiece(piece: Piece, pieces: Piece[]) {\n    let p = null;\n    for (const piec of pieces) {\n      if (\n        samePosition(piec.position, piece.position) &&\n        piece.team.valueOf() !== piec.team.valueOf()\n      ) {\n        p = piec;\n      }\n    }\n    if (p !== null) {\n      // console.log(\"captured piece \", p);\n      let idx = pieces.indexOf(p);\n      if (idx !== -1) {\n        // console.log(\"p jamais égale \", idx);\n        pieces.splice(idx, 1);\n      }\n    }\n    return pieces;\n  }\n\n  isInCheck(pieces: Piece[], turn: boolean) {\n    // Find the king\n    let king = this.getKing(pieces, turn);\n    for (const piece of pieces) {\n      // Check if enemy pieces can check the king\n      if (piece?.team !== king?.team) {\n        if (king !== null) {\n          if (\n            this.isValidMove(\n              piece.position,\n              { x: king.position.x, y: king.position.y },\n              piece.type,\n              piece.team,\n              pieces,\n              !turn,\n              1\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  kingMoveToInvalidSquare(\n    team: TeamType,\n    desiredPosition: Position,\n    board: Piece[],\n    turn: boolean,\n    depth: number\n  ): boolean {\n    const currentTurn = !turn;\n\n    const king = this.getKing(board, turn);\n    let p = null;\n    if (king !== null) {\n      p = this.removeCapturedPiece(king, board);\n    }\n\n    for (const piece of board) {\n      if (piece.team !== team && depth < 1) {\n        if (\n          this.isValidMove(\n            piece.position,\n            desiredPosition,\n            piece.type,\n            piece.team,\n            board,\n            currentTurn,\n            depth + 1\n          )\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  checkCastling(king: Piece, pieces: Piece[], side: number, turn: boolean) {\n    const row = king.position.y;\n    let rook = null;\n\n    // Castling right\n    if (side < 0) {\n      for (const piece of pieces) {\n        // Check if attacks between rook and king\n        if (piece.team !== king.team) {\n          for (let i = 0; i < 3; i++) {\n            if (\n              this.isValidMove(\n                piece.position,\n                { x: king.position.x + i, y: king.position.y },\n                piece.type,\n                piece.team,\n                pieces,\n                !turn,\n                1\n              )\n            ) {\n              return false;\n            }\n          }\n        }\n\n        if (piece.type === PieceType.ROOK && piece.team === king.team) {\n          if (piece.position.x === 7) {\n            rook = piece;\n            if (piece.hasMoved) {\n              return false;\n            }\n          }\n        }\n\n        // Check if pieces between rook and king\n        if (samePosition(piece.position, { x: 5, y: row })) {\n          return false;\n        } else if (samePosition(piece.position, { x: 6, y: row })) {\n          return false;\n        }\n      }\n    }\n    // Castling left\n    else {\n      for (const piece of pieces) {\n        if (piece.team !== king.team) {\n          for (let i = 0; i < 4; i++) {\n            if (\n              this.isValidMove(\n                piece.position,\n                { x: king.position.x - i, y: king.position.y },\n                piece.type,\n                piece.team,\n                pieces,\n                !turn,\n                1\n              )\n            ) {\n              return false;\n            }\n          }\n        }\n\n        if (piece.type === PieceType.ROOK && piece.team === king.team) {\n          if (piece.position.x === 0) {\n            rook = piece;\n            if (piece.hasMoved) {\n              return false;\n            }\n          }\n        }\n\n        if (samePosition(piece.position, { x: 1, y: row })) {\n          return false;\n        } else if (samePosition(piece.position, { x: 2, y: row })) {\n          return false;\n        } else if (samePosition(piece.position, { x: 3, y: row })) {\n          return false;\n        }\n      }\n    }\n\n    // If rook is not null, it means we found the rook.\n    if (rook !== null) {\n      return true;\n    }\n    return false;\n  }\n\n  getKing(pieces: Piece[], turn: boolean) {\n    for (const piece of pieces) {\n      if (piece?.type === PieceType.KING) {\n        if (turn) {\n          if (piece.team === TeamType.OUR) {\n            return piece;\n          }\n        } else {\n          if (piece.team === TeamType.OPPONENT) {\n            return piece;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  checkTurn(team: TeamType, turn: boolean) {\n    if (\n      (team === TeamType.OUR && turn === false) ||\n      (team === TeamType.OPPONENT && turn === true)\n    ) {\n      // If true then it is NOT your turn\n      return true;\n    }\n  }\n\n  isCheckmate(pieces: Piece[], turn: boolean) : string {\n    // Potential draw\n    if (pieces.length === 2) {\n      return \"draw\";\n    } else if (pieces.length < 5) {\n      let countWhite = 0;\n      let countBlack = 0;\n      for (const piece of pieces) {\n        if (piece.type !== PieceType.KING) {\n          if (\n            piece.type !== PieceType.PAWN &&\n            piece.type !== PieceType.QUEEN &&\n            piece.type !== PieceType.ROOK\n          ) {\n            if (piece.team === TeamType.OUR) {\n              countWhite++;\n            } else {\n              countBlack++;\n            }\n          }\n        }\n      }\n      if (countWhite < 2) {\n        return \"draw\";\n      } else if (countBlack < 2) {\n        return \"draw\";\n      }\n    }\n\n    for (const piece of pieces) {\n      // white's turn\n      if (turn && piece.team === TeamType.OUR) {\n        for (let i = 0; i < 8; i++) {\n          for (let j = 0; j < 8; j++) {\n            if (\n              this.isValidMove(\n                piece.position,\n                { x: i, y: j },\n                piece.type,\n                piece.team,\n                pieces,\n                turn,\n                0\n              )\n            ) {\n              return \"false\";\n            }\n          }\n        }\n      } else if (!turn && piece.team === TeamType.OPPONENT) {\n        for (let i = 0; i < 8; i++) {\n          for (let j = 0; j < 8; j++) {\n            if (\n              this.isValidMove(\n                piece.position,\n                { x: i, y: j },\n                piece.type,\n                piece.team,\n                pieces,\n                turn,\n                0\n              )\n            ) {\n              return \"false\";\n            }\n          }\n        }\n      }\n    }\n\n    if (this.isInCheck(pieces, turn)) {\n      return \"true\";\n    } else {\n      return \"stalemate\";\n    }\n  }\n}\n","/Users/philippebaillargeon/Documents/AI/chess-app/src/components/Tile/Tile.tsx",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/index.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/KnightRules.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/RookRules.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/BishopRules.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/PawnRules.ts",["116"],"import { Piece, PieceType, Position, TeamType } from \"../../Constants\";\nimport { tileIsOccupied, tileIsOccupiedByOpponent } from \"./GeneralRules\";\n\nexport const pawnMove = (initialPosition: Position, desiredPosition: Position, team: TeamType, boardState: Piece[]): boolean => {\n    const specialRow = team === TeamType.OUR ? 1 : 6;\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // if(test) console.log('works')\n\n    //MOVEMENT LOGIC\n    if (\n      initialPosition.x === desiredPosition.x &&\n      initialPosition.y === specialRow &&\n      desiredPosition.y - initialPosition.y === 2 * pawnDirection\n    ) {\n      if (\n        !tileIsOccupied(desiredPosition, boardState) &&\n        !tileIsOccupied(\n          { x: desiredPosition.x, y: desiredPosition.y - pawnDirection },\n          boardState\n        )\n      ) {\n\n        return true;\n      }\n    } else if (\n      initialPosition.x === desiredPosition.x &&\n      desiredPosition.y - initialPosition.y === pawnDirection\n    ) {\n      if (!tileIsOccupied(desiredPosition, boardState)) {\n        // console.log('ffffffffffffffffff')\n        return true;\n      }\n    }\n    //ATTACK LOGIC\n    else if (\n      desiredPosition.x - initialPosition.x === -1 &&\n      desiredPosition.y - initialPosition.y === pawnDirection\n    ) {\n      //ATTACK IN UPPER OR BOTTOM LEFT CORNER\n      if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n        return true;\n      }\n    } else if (\n      desiredPosition.x - initialPosition.x === 1 &&\n      desiredPosition.y - initialPosition.y === pawnDirection\n    ) {\n      //ATTACK IN THE UPPER OR BOTTOM RIGHT CORNER\n      if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {    \n        return true;\n      }\n    }\n\n    return false;\n  }","/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/QueenRules.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/KingRules.ts",[],"/Users/philippebaillargeon/Documents/AI/chess-app/src/referee/rules/GeneralRules.ts",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":23,"column":10,"nodeType":"123","messageId":"124","endLine":23,"endColumn":15},{"ruleId":"121","severity":1,"message":"125","line":23,"column":17,"nodeType":"123","messageId":"124","endLine":23,"endColumn":25},{"ruleId":"121","severity":1,"message":"126","line":24,"column":10,"nodeType":"123","messageId":"124","endLine":24,"endColumn":22},{"ruleId":"121","severity":1,"message":"127","line":24,"column":24,"nodeType":"123","messageId":"124","endLine":24,"endColumn":39},{"ruleId":"121","severity":1,"message":"128","line":25,"column":10,"nodeType":"123","messageId":"124","endLine":25,"endColumn":19},{"ruleId":"121","severity":1,"message":"129","line":25,"column":21,"nodeType":"123","messageId":"124","endLine":25,"endColumn":33},{"ruleId":"130","severity":1,"message":"131","line":336,"column":11,"nodeType":"132","endLine":339,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":340,"column":11,"nodeType":"132","endLine":343,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":344,"column":11,"nodeType":"132","endLine":347,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":348,"column":11,"nodeType":"132","endLine":351,"endColumn":13},{"ruleId":"121","severity":1,"message":"133","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":15},{"ruleId":"121","severity":1,"message":"134","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":7},{"ruleId":"121","severity":1,"message":"135","line":12,"column":3,"nodeType":"123","messageId":"124","endLine":12,"endColumn":11},{"ruleId":"121","severity":1,"message":"136","line":13,"column":3,"nodeType":"123","messageId":"124","endLine":13,"endColumn":13},{"ruleId":"121","severity":1,"message":"137","line":14,"column":3,"nodeType":"123","messageId":"124","endLine":14,"endColumn":13},{"ruleId":"121","severity":1,"message":"138","line":15,"column":3,"nodeType":"123","messageId":"124","endLine":15,"endColumn":11},{"ruleId":"121","severity":1,"message":"139","line":16,"column":3,"nodeType":"123","messageId":"124","endLine":16,"endColumn":12},{"ruleId":"121","severity":1,"message":"140","line":17,"column":3,"nodeType":"123","messageId":"124","endLine":17,"endColumn":11},{"ruleId":"141","severity":1,"message":"142","line":43,"column":24,"nodeType":"143","messageId":"144","endLine":43,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":56,"column":30,"nodeType":"143","messageId":"144","endLine":56,"endColumn":32},{"ruleId":"145","severity":1,"message":"146","line":93,"column":19,"nodeType":"147","messageId":"148","endLine":95,"endColumn":6},{"ruleId":"145","severity":1,"message":"149","line":94,"column":8,"nodeType":"147","messageId":"148","endLine":94,"endColumn":61},{"ruleId":"145","severity":1,"message":"146","line":99,"column":21,"nodeType":"147","messageId":"148","endLine":103,"endColumn":11},{"ruleId":"145","severity":1,"message":"149","line":99,"column":37,"nodeType":"147","messageId":"148","endLine":103,"endColumn":10},{"ruleId":"145","severity":1,"message":"146","line":108,"column":21,"nodeType":"147","messageId":"148","endLine":112,"endColumn":11},{"ruleId":"145","severity":1,"message":"149","line":108,"column":37,"nodeType":"147","messageId":"148","endLine":112,"endColumn":10},{"ruleId":"145","severity":1,"message":"146","line":121,"column":19,"nodeType":"147","messageId":"148","endLine":123,"endColumn":8},{"ruleId":"145","severity":1,"message":"149","line":122,"column":10,"nodeType":"147","messageId":"148","endLine":122,"endColumn":64},{"ruleId":"150","severity":1,"message":"151","line":134,"column":39,"nodeType":"152","messageId":"153","endLine":134,"endColumn":41},{"ruleId":"150","severity":1,"message":"151","line":171,"column":39,"nodeType":"152","messageId":"153","endLine":171,"endColumn":41},{"ruleId":"145","severity":1,"message":"154","line":210,"column":22,"nodeType":"147","messageId":"148","endLine":210,"endColumn":46},{"ruleId":"121","severity":1,"message":"155","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"121","severity":1,"message":"134","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":7},{"ruleId":"150","severity":1,"message":"151","line":129,"column":33,"nodeType":"152","messageId":"153","endLine":129,"endColumn":35},{"ruleId":"150","severity":1,"message":"151","line":153,"column":29,"nodeType":"152","messageId":"153","endLine":153,"endColumn":31},{"ruleId":"121","severity":1,"message":"156","line":225,"column":7,"nodeType":"123","messageId":"124","endLine":225,"endColumn":8},{"ruleId":"121","severity":1,"message":"157","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'first' is assigned a value but never used.","Identifier","unusedVar","'setFirst' is assigned a value but never used.","'engineToPlay' is assigned a value but never used.","'setEngineToPlay' is assigned a value but never used.","'checkmate' is assigned a value but never used.","'setCheckmate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Referee' is defined but never used.","'Move' is defined but never used.","'pawnMove' is defined but never used.","'knightMove' is defined but never used.","'bishopMove' is defined but never used.","'rookMove' is defined but never used.","'queenMove' is defined but never used.","'kingMove' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/consistent-type-assertions","Use 'as AlphaBetaMove' instead of '<AlphaBetaMove>'.","TSTypeAssertion","as","Use 'as unknown' instead of '<unknown>'.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Use 'as Position' instead of '<Position>'.","'off' is defined but never used.","'p' is assigned a value but never used.","'PieceType' is defined but never used.","no-global-assign","no-unsafe-negation"]